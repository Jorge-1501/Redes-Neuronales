{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyODsIyq1kYGOOr/4he1GL/c"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Ingreso a Drive y GitHub"],"metadata":{"id":"504lE174Z_-F"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rEdc6rdqOenq","executionInfo":{"status":"ok","timestamp":1697465945067,"user_tz":360,"elapsed":29596,"user":{"displayName":"Jorge L. TORAL GAMEZ","userId":"14691233302283476948"}},"outputId":"9f342b2c-7b04-4a1b-e1e2-1af89b629e71"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["from getpass import getpass\n","\n","PASS = getpass('Enter your password')\n","\n","!git config --global user.email \"jltg_1501@hotmail.com\"\n","!git config --global user.name \"Jorge-1501\"\n","!git config --global user.password {PASS}"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eSO3MY_UXMSe","executionInfo":{"status":"ok","timestamp":1697465989593,"user_tz":360,"elapsed":3782,"user":{"displayName":"Jorge L. TORAL GAMEZ","userId":"14691233302283476948"}},"outputId":"494a23c2-15fa-436c-a10c-827eb9b8520b"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter your password··········\n"]}]},{"cell_type":"code","source":["!pwd"],"metadata":{"id":"EvXx7EYzRSWH","executionInfo":{"status":"ok","timestamp":1697466053233,"user_tz":360,"elapsed":571,"user":{"displayName":"Jorge L. TORAL GAMEZ","userId":"14691233302283476948"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ac243014-e9d0-4787-dd87-9b7491baacaf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/Colab_GitHub/Redes-Neuronales/Digitos/src\n"]}]},{"cell_type":"code","source":["%cd /content/drive/MyDrive/Colab_GitHub/Redes-Neuronales/Digitos/src"],"metadata":{"id":"pJNdy2ZRRk03","executionInfo":{"status":"ok","timestamp":1697466043868,"user_tz":360,"elapsed":1495,"user":{"displayName":"Jorge L. TORAL GAMEZ","userId":"14691233302283476948"}},"outputId":"71687590-5e67-4d37-cf44-d1dc19ca50df","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/Colab_GitHub/Redes-Neuronales/Digitos/src\n"]}]},{"cell_type":"code","source":["!git pull"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P1hZ0d7xpLgB","executionInfo":{"status":"ok","timestamp":1697244387507,"user_tz":360,"elapsed":63800,"user":{"displayName":"Jorge L. TORAL GAMEZ","userId":"14691233302283476948"}},"outputId":"e7c93a98-6915-4dd7-c58c-ffed67bda60c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["remote: Enumerating objects: 9, done.\u001b[K\n","remote: Counting objects:  11% (1/9)\u001b[K\rremote: Counting objects:  22% (2/9)\u001b[K\rremote: Counting objects:  33% (3/9)\u001b[K\rremote: Counting objects:  44% (4/9)\u001b[K\rremote: Counting objects:  55% (5/9)\u001b[K\rremote: Counting objects:  66% (6/9)\u001b[K\rremote: Counting objects:  77% (7/9)\u001b[K\rremote: Counting objects:  88% (8/9)\u001b[K\rremote: Counting objects: 100% (9/9)\u001b[K\rremote: Counting objects: 100% (9/9), done.\u001b[K\n","remote: Compressing objects: 100% (6/6), done.\u001b[K\n","remote: Total 9 (delta 3), reused 9 (delta 3), pack-reused 0\u001b[K\n","Unpacking objects: 100% (9/9), 260.72 KiB | 227.00 KiB/s, done.\n","From https://github.com/Jorge-1501/Redes-Neuronales\n","   76ea93f..f7b475e  main       -> origin/main\n","Updating 76ea93f..f7b475e\n","Fast-forward\n"," Digitos/src/__pycache__/Tarea_3.pdf | Bin \u001b[31m0\u001b[m -> \u001b[32m470830\u001b[m bytes\n"," README.md                           |   3 \u001b[32m+++\u001b[m\n"," 2 files changed, 3 insertions(+)\n"," create mode 100644 Digitos/src/__pycache__/Tarea_3.pdf\n"]}]},{"cell_type":"code","source":["!git add .\n","!git commit -m \"Commit externo, realizado fuera de los notebooks de Google Colab en lista.\"\n","!git push"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N_E_R1NlpkdU","executionInfo":{"status":"ok","timestamp":1697244509456,"user_tz":360,"elapsed":3998,"user":{"displayName":"Jorge L. TORAL GAMEZ","userId":"14691233302283476948"}},"outputId":"bf8e5874-0d99-45af-b008-aafa23138f78"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[main f94d868] Commit externo, realizado fuera de los notebooks de Google Colab en lista.\n"," 2 files changed, 2 insertions(+), 1 deletion(-)\n"," create mode 100644 Digitos/src/Tarea4.ipynb\n","Enumerating objects: 10, done.\n","Counting objects: 100% (10/10), done.\n","Delta compression using up to 2 threads\n","Compressing objects: 100% (6/6), done.\n","Writing objects: 100% (6/6), 1.81 KiB | 462.00 KiB/s, done.\n","Total 6 (delta 3), reused 0 (delta 0), pack-reused 0\n","remote: Resolving deltas: 100% (3/3), completed with 3 local objects.\u001b[K\n","To https://github.com/Jorge-1501/Redes-Neuronales\n","   f7b475e..f94d868  main -> main\n"]}]},{"cell_type":"markdown","source":["# Ejercicio 1"],"metadata":{"id":"LMydO-UAp_Pe"}},{"cell_type":"markdown","source":["Diseñar una capa en keras que transforme imágenes a color en escala de grises. Pueden usar la base de datos mnist o cualquier otra para hacer las pruebas. (Notar que aquí sólo se pide la capa, no hay nada que entrenar ya que no hay nada que ajustar, sólo diseñar la capa)."],"metadata":{"id":"Q4sDoehOqEJC"}},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import tensorflow as tf"],"metadata":{"id":"7141LAL8qUHr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from tensorflow.keras.datasets import mnist\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Flatten, Dense\n","#from tensorflow.keras.datasets import pascal_voc"],"metadata":{"id":"axWwRK2fvZ1O"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Mnist"],"metadata":{"id":"PLaZ0oMyzuRr"}},{"cell_type":"code","source":["# Carga de la base de datos MNIST\n","(x_train, y_train), (x_test, y_test) = mnist.load_data()\n","\n","# Preprocesamiento de los datos\n","x_train = x_train / 255.0\n","x_test = x_test / 255.0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2AhZDaaesXYW","executionInfo":{"status":"ok","timestamp":1697466434262,"user_tz":360,"elapsed":3228,"user":{"displayName":"Jorge L. TORAL GAMEZ","userId":"14691233302283476948"}},"outputId":"9b5cd80c-876a-49f2-e20d-a17acc4e0749"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11490434/11490434 [==============================] - 2s 0us/step\n"]}]},{"cell_type":"code","source":["# Capa de tranformación a escala de grises\n","class GrayscaleLayer(tf.keras.layers.Layer):\n","    def __init__(self, **kwargs):\n","        super(GrayscaleLayer, self).__init__(**kwargs)\n","\n","    def call(self, inputs):\n","        # Verificar si la imagen es en escala de grises (1 canal)\n","        if inputs.shape[-1] == 1:\n","            return inputs  # No es necesario realizar la conversión\n","        grayscale = tf.image.rgb_to_grayscale(inputs)\n","        return grayscale"],"metadata":{"id":"vMgKPt9Oqxau"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Crear el modelo\n","model = Sequential()\n","\n","# Agregar la capa personalizada para escala de grises\n","model.add(GrayscaleLayer(input_shape=(28, 28, 1)))  # Las imágenes MNIST son de 28x28 píxeles en escala de grises\n","model.summary()\n","# Aplanar la imagen\n","model.add(Flatten())\n","\n","# Agregar capas de clasificación\n","model.add(Dense(128, activation='relu'))\n","model.add(Dense(10, activation='softmax'))\n","\n","# Compilar el modelo\n","model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kwneRXNnsm4e","executionInfo":{"status":"ok","timestamp":1697246856649,"user_tz":360,"elapsed":407,"user":{"displayName":"Jorge L. TORAL GAMEZ","userId":"14691233302283476948"}},"outputId":"ed45ebbe-2f8c-418f-f88f-0a3360133a20"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_6\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," grayscale_layer_6 (Graysca  (None, 28, 28, 1)         0         \n"," leLayer)                                                        \n","                                                                 \n","=================================================================\n","Total params: 0 (0.00 Byte)\n","Trainable params: 0 (0.00 Byte)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["# Entrenar el modelo\n","model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))\n","\n","# Evaluar el modelo\n","test_loss, test_acc = model.evaluate(x_test, y_test)\n","print(f'Precisión en el conjunto de prueba: {test_acc}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JflX772nuqLY","executionInfo":{"status":"ok","timestamp":1697246903739,"user_tz":360,"elapsed":43447,"user":{"displayName":"Jorge L. TORAL GAMEZ","userId":"14691233302283476948"}},"outputId":"01a2e29b-c70a-4031-ffc4-51c5d6fe2d61"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","1875/1875 [==============================] - 11s 3ms/step - loss: 0.2665 - accuracy: 0.9252 - val_loss: 0.1436 - val_accuracy: 0.9571\n","Epoch 2/5\n","1875/1875 [==============================] - 7s 4ms/step - loss: 0.1181 - accuracy: 0.9650 - val_loss: 0.1086 - val_accuracy: 0.9687\n","Epoch 3/5\n","1875/1875 [==============================] - 6s 3ms/step - loss: 0.0786 - accuracy: 0.9765 - val_loss: 0.0863 - val_accuracy: 0.9736\n","Epoch 4/5\n","1875/1875 [==============================] - 7s 4ms/step - loss: 0.0586 - accuracy: 0.9820 - val_loss: 0.0775 - val_accuracy: 0.9772\n","Epoch 5/5\n","1875/1875 [==============================] - 6s 3ms/step - loss: 0.0455 - accuracy: 0.9860 - val_loss: 0.0726 - val_accuracy: 0.9787\n","313/313 [==============================] - 1s 3ms/step - loss: 0.0726 - accuracy: 0.9787\n","Precisión en el conjunto de prueba: 0.9786999821662903\n"]}]},{"cell_type":"code","source":["# Selecciona una imagen de CIFAR-10\n","sample_index = 5  # Cambia este índice según la imagen que quieras visualizar\n","\n","# Obtiene la imagen original y la imagen transformada\n","original_image = x_test[sample_index]\n","transformed_image = model.layers[0](original_image[np.newaxis, ...])  # Aplica la capa personalizada\n","\n","# Convierte la imagen a un formato adecuado para la visualización\n","original_image = np.squeeze(original_image)\n","transformed_image = np.squeeze(transformed_image)\n","\n","# Visualiza la imagen original y la transformada\n","plt.figure(figsize=(8, 4))\n","plt.subplot(1, 2, 1)\n","plt.title(\"Imagen Original (RGB)\")\n","plt.imshow(original_image)\n","plt.axis('off')\n","\n","plt.subplot(1, 2, 2)\n","plt.title(\"Imagen Transformada (Escala de Grises)\")\n","plt.imshow(transformed_image, cmap='gray')\n","plt.axis('off')\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":479},"executionInfo":{"status":"error","timestamp":1697247849018,"user_tz":360,"elapsed":562,"user":{"displayName":"Jorge L. TORAL GAMEZ","userId":"14691233302283476948"}},"outputId":"e962d7cb-dc93-4341-99ec-b3b9120c3b31","id":"H1oYxVKA2glv"},"execution_count":null,"outputs":[{"output_type":"error","ename":"InvalidArgumentError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)","\u001b[0;32m<ipython-input-35-fc0482208832>\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Obtiene la imagen original y la imagen transformada\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0moriginal_image\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx_test\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msample_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mtransformed_image\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moriginal_image\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnewaxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m...\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Aplica la capa personalizada\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# Convierte la imagen a un formato adecuado para la visualización\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     68\u001b[0m             \u001b[0;31m# To get the full stack trace, call:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m             \u001b[0;31m# `tf.debugging.disable_traceback_filtering()`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 70\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     71\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m             \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-25-1fe571ec4e6f>\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m      8\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0minputs\u001b[0m  \u001b[0;31m# No es necesario realizar la conversión\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m         \u001b[0mgrayscale\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrgb_to_grayscale\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mgrayscale\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mInvalidArgumentError\u001b[0m: Exception encountered when calling layer 'grayscale_layer_6' (type GrayscaleLayer).\n\n{{function_node __wrapped__MatMul_device_/job:localhost/replica:0/task:0/device:GPU:0}} Matrix size-incompatible: In[0]: [28,28], In[1]: [3,1] [Op:MatMul] name: \n\nCall arguments received by layer 'grayscale_layer_6' (type GrayscaleLayer):\n  • inputs=tf.Tensor(shape=(1, 28, 28), dtype=float32)"]}]},{"cell_type":"markdown","source":["### cifar10 (3 canales)"],"metadata":{"id":"rHo_fQ58zx8S"}},{"cell_type":"code","source":["from tensorflow.keras.datasets import cifar10"],"metadata":{"id":"Mk-VduwdzLQW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Cargar la base de datos CIFAR-10\n","(x_train2, y_train2), (x_test2, y_test2) = cifar10.load_data()\n","\n","# Preprocesar los datos\n","x_train2 = x_train2 / 255.0\n","x_test2 = x_test2 / 255.0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xiiBe2muz4jr","executionInfo":{"status":"ok","timestamp":1697247624997,"user_tz":360,"elapsed":11716,"user":{"displayName":"Jorge L. TORAL GAMEZ","userId":"14691233302283476948"}},"outputId":"507834da-45a1-4938-f628-32c5bb64e174"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n","170498071/170498071 [==============================] - 6s 0us/step\n"]}]},{"cell_type":"code","source":["# Crear el modelo\n","model2 = Sequential()\n","\n","# Agregar la capa personalizada para escala de grises\n","model2.add(GrayscaleLayer(input_shape=(32, 32, 3)))  # Las imágenes CIFAR-10 son de 32x32 píxeles en RGB\n","\n","# Aplanar la imagen\n","model2.add(Flatten())\n","\n","# Agregar capas de clasificación\n","model2.add(Dense(128, activation='relu'))\n","model2.add(Dense(10, activation='softmax'))  # CIFAR-10 tiene 10 clases de objetos\n","\n","# Compilar el modelo\n","model2.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])"],"metadata":{"id":"iRv0vw6B0J7W"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Entrenar el modelo\n","model2.fit(x_train2, y_train2, epochs=5, validation_data=(x_test2, y_test2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kmjgCUv50g59","executionInfo":{"status":"ok","timestamp":1697247684552,"user_tz":360,"elapsed":45703,"user":{"displayName":"Jorge L. TORAL GAMEZ","userId":"14691233302283476948"}},"outputId":"4785d1d1-7801-4c70-f27e-ed3cafd54828"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","1563/1563 [==============================] - 9s 5ms/step - loss: 2.0575 - accuracy: 0.2537 - val_loss: 1.9578 - val_accuracy: 0.3033\n","Epoch 2/5\n","1563/1563 [==============================] - 7s 5ms/step - loss: 1.9318 - accuracy: 0.3062 - val_loss: 1.9065 - val_accuracy: 0.3170\n","Epoch 3/5\n","1563/1563 [==============================] - 10s 6ms/step - loss: 1.8808 - accuracy: 0.3295 - val_loss: 1.8539 - val_accuracy: 0.3421\n","Epoch 4/5\n","1563/1563 [==============================] - 7s 4ms/step - loss: 1.8454 - accuracy: 0.3432 - val_loss: 1.8377 - val_accuracy: 0.3402\n","Epoch 5/5\n","1563/1563 [==============================] - 10s 6ms/step - loss: 1.8155 - accuracy: 0.3551 - val_loss: 1.8150 - val_accuracy: 0.3528\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7e89986673a0>"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["# Evaluar el modelo\n","test_loss2, test_acc2 = model2.evaluate(x_test2, y_test2)\n","print(f'Precisión en el conjunto de prueba: {test_acc2}')"],"metadata":{"id":"Z48huz_U0aio"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Selecciona una imagen de CIFAR-10\n","sample_index2 = 5  # Cambia este índice según la imagen que quieras visualizar\n","\n","# Obtiene la imagen original y la imagen transformada\n","original_image2 = x_test2[sample_index2]\n","transformed_image2 = model2.layers[0](original_image2[np.newaxis, ...])  # Aplica la capa personalizada\n","\n","# Convierte la imagen a un formato adecuado para la visualización\n","original_image2 = np.squeeze(original_image2)\n","transformed_image2 = np.squeeze(transformed_image2)\n","\n","# Visualiza la imagen original y la transformada\n","plt.figure(figsize=(8, 4))\n","plt.subplot(1, 2, 1)\n","plt.title(\"Imagen Original (RGB)\")\n","plt.imshow(original_image2)\n","plt.axis('off')\n","\n","plt.subplot(1, 2, 2)\n","plt.title(\"Imagen Transformada (Escala de Grises)\")\n","plt.imshow(transformed_image2, cmap='gray')\n","plt.axis('off')\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":341},"id":"G2hNZyhq1yES","executionInfo":{"status":"ok","timestamp":1697247753961,"user_tz":360,"elapsed":437,"user":{"displayName":"Jorge L. TORAL GAMEZ","userId":"14691233302283476948"}},"outputId":"bbea06a2-5429-4ba6-bb59-02d5f21562a8"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x400 with 2 Axes>"],"image/png":"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n32GH374AaeddhpmzZqF1157DW+//TZeeOEFeL1eDBgwAMCPTfeMGTNw4YUX4pZbbsGmTZvwwgsvYNWqVfj8889j9xDA+L5WUFCAYDCI22+/HRUVFXj66acxbtw4DB8+HB9//DHuuecebN26FbNnz8b06dPxl7/8Jfazr776KrxeL37zm9/A6/VixYoVeOihh1BTU4NnnnkmVvfKK69g6tSpOOecc3DnnXeisLAQY8aMQUpKCrp06RKrq6mpwcsvv4zrrrsON910E2pra/HKK69gxIgR+M9//oNTTjnF8LytXLkS/fr1i9v3A1VXV8fuPy0sFkvsfCxfvhzXXXcdLrjggth19MMPP+Dzzz/HHXfcAQCoq6vD4MGD8cMPP2DKlCk47bTTUFZWhnfffRe7d+9GWlraEe3HqlWrsHLlSowfPx45OTnYvn07XnjhBQwbNgwbNmyAx+Np92eVUrj88svx2Wef4eabb8ZJJ52Et99+GxMnTmxVu379epx77rnIzs7Gvffei8TERPz973/HFVdcgbfeegtXXnllu+v55z//CQC48cYb261pz6OPPgqHw4Hp06ejubm5zY/Og8EgRowYgebmZtx+++3IysrCnj17sGTJElRVVcW+IvH444/jwQcfxLhx4/CLX/wCpaWlmD17NoYMGYJvvvkGgUBAeyzgx9cbpRRWrlzZ5utRuzr6LdZjWVsfE0ycOFEBUE888UTsscrKSuV2u5XFYlELFiyIPb5x48ZWb+c3NTW1eou7qKhIOZ1O9cgjj8QemzlzpgKgFi9eHHussbFR5efnKwDqo48+UkopFY1GVa9evdSIESNUNBqN1TY0NKju3buriy66KPbYww8/rACoKVOmxK3/yiuvVKmpqYbHYvHixQqA+tOf/mRY5/P51GmnnRb7/6FDhyoAau7cua1qD/64R3eflfrxPOTm5sb+v+UjjdTUVFVRURF7/J133lEA1D//+c/YYw0NDa225W9/+5sCoD755JPYY7ofo994441tHr+WbZoxY4YqLS1V+/fvV59++qk644wzFAD1j3/8I1a7du1aBUDdeeedrcYpLy9XpaWlsX/Nzc1xxwFAq3/Z2dlq9erVbW7vE088oQCo4uJiw/2i9vHe0L62PkYHoKxWq1q/fn2r+oOfj8FgUPXr108NHz681RgOh0Nt3bo19ljL82b27Nmx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/WT79u2HnZYQiURafSyakZGBzp07x31E35YLL7wQDocDf/7zn+POwyuvvILq6upWfxlvhrbuT8FgsNWUf6effjrS09Mxd+5cBIPB2OOvvvpqqwaqrTG/+uorw1nMDnT22Wdj3bp14vFrz8GRclarNfbX/y1jXn311Vi7di3efvvtVj/fst1Hsh9tPbdmz56tNRvPJZdcgnA4jBdeeCH2WCQSwezZs+PqMjIyMGzYMLz44ovYt29fq3Gk59u5556Liy66CPPmzWs3mu5IPmGoqalBOByOe6x///6wWq2x83DVVVfBZrNhxowZrdallIqdS52xWqxevRoWi+WQX3P4zuYRGj16NB555BFMnjwZ55xzDr7//nsUFBS0+p7N1KlT8dxzz+G6667DHXfcgU6dOqGgoAAulwvA///+g9Vqxcsvv4xRo0bh5JNPxuTJk5GdnY09e/bgo48+gs/ni0UqHKkbbrgBq1atwrPPPosNGzbghhtuQHJyMtasWYO//OUvSE1NxcKFC9uNyJDo7vOR8Pl8sViaUCiE7OxsvP/++0f0m/t5552H1NRUfPDBB3HvMhi54447MGvWLPz+97/HggULAPz4xxjPPfccbr/9dvTq1Ss2g1AwGMTmzZtRUFAAh8MRy9BsEQ6H8cYbbwD48aOc7du3Y+7cuYhGo61+6y8pKcF3332HW2+99bD3l8xxPN8bDtell16KP/7xjxg5ciSuv/56lJSU4Pnnn0fPnj0Nv7LTntraWuTk5OCaa67BwIED4fV68cEHH2DVqlVx72q1JT09Hffddx9mzJiBkSNHYsyYMdi0aRPmzJmDM84447AiaQ7VOeecg+TkZEycOBG/+tWvYLFY8Prrr7d64bfb7XjssccwdepUDB8+HNdeey2Kioowf/78VtfL6NGjsWjRIlx55ZW49NJLUVRUhLlz56Jv375t/hJysMsvvxyPPvoo/v3vf+Piiy9utXzp0qWxP1w6eF969OiBX/ziF6ioqMDw4cORk5ODHTt2YPbs2TjllFNi73bdfffdWLhwIcaOHYspU6Zg0KBBqKiowLvvvou5c+di4MCBR7Qfo0ePxuuvvw6/34++ffviiy++wAcffBD3Xej2XHbZZTj33HNx7733Yvv27ejbty8WLVrU5nc9n3/+eZx33nno378/brrpJvTo0QPFxcX44osvsHv37jYz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\n"},"metadata":{}}]},{"cell_type":"code","source":["from tensorflow.keras.layers import Input\n","from tensorflow.keras.models import Model"],"metadata":{"id":"2XbIlh7L4dQ5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Selecciona una imagen de CIFAR-10\n","sample_index = 0\n","sample_image = x_train[sample_index]\n","\n","# Capa para convertir a escala de grises\n","class GrayscaleLayer(tf.keras.layers.Layer):\n","    def __init__(self, **kwargs):\n","        super(GrayscaleLayer, self).__init__(**kwargs)\n","\n","    def call(self, inputs):\n","        grayscale = tf.image.rgb_to_grayscale(inputs)\n","        return grayscale\n","\n","# Crea una instancia de la capa personalizada\n","grayscale_layer = GrayscaleLayer()\n","\n","# Aplica la capa personalizada a la imagen\n","grayscale_image = grayscale_layer(sample_image[tf.newaxis, ...])\n","\n","# Visualiza la imagen original y la transformada\n","plt.figure(figsize=(8, 4))\n","plt.subplot(1, 2, 1)\n","plt.title(\"Imagen Original (RGB)\")\n","plt.imshow(sample_image)\n","plt.axis('off')\n","\n","plt.subplot(1, 2, 2)\n","plt.title(\"Imagen Transformada (Escala de Grises)\")\n","plt.imshow(grayscale_image[0, ..., 0], cmap='gray')\n","plt.axis('off')\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":496},"id":"uwQwRPS82cTY","executionInfo":{"status":"error","timestamp":1697466569664,"user_tz":360,"elapsed":385,"user":{"displayName":"Jorge L. TORAL GAMEZ","userId":"14691233302283476948"}},"outputId":"367bb1fb-9c7b-4991-ec60-43c37cb0d01f"},"execution_count":null,"outputs":[{"output_type":"error","ename":"InvalidArgumentError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)","\u001b[0;32m<ipython-input-13-82780a128eb1>\u001b[0m in \u001b[0;36m<cell line: 18>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;31m# Aplica la capa personalizada a la imagen\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m \u001b[0mgrayscale_image\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgrayscale_layer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msample_image\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnewaxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m...\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;31m# Visualiza la imagen original y la transformada\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     68\u001b[0m             \u001b[0;31m# To get the full stack trace, call:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m             \u001b[0;31m# `tf.debugging.disable_traceback_filtering()`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 70\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     71\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m             \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-13-82780a128eb1>\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mcall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m         \u001b[0mgrayscale\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrgb_to_grayscale\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mgrayscale\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mInvalidArgumentError\u001b[0m: Exception encountered when calling layer 'grayscale_layer_1' (type GrayscaleLayer).\n\n{{function_node __wrapped__MatMul_device_/job:localhost/replica:0/task:0/device:GPU:0}} Matrix size-incompatible: In[0]: [28,28], In[1]: [3,1] [Op:MatMul] name: \n\nCall arguments received by layer 'grayscale_layer_1' (type GrayscaleLayer):\n  • inputs=tf.Tensor(shape=(1, 28, 28), dtype=float32)"]}]}]}